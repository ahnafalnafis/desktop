vim9script noclear

# Vim mode: dynamic | minimal
# minimal: Specially for TTY and for basic file editing.
# dynamic: Goal to make Vim like IDE.
if (!exists('g:mode') && !empty($DISPLAY))
  g:mode = 'dynamic'
endif

def Notify(message: string): void
  echohl ModeMsg
  echomsg message
  echohl None
enddef

def Refresh(): void
  :nohlsearch
  redraw!
  Notify('Refreshed!')
enddef

def SmartTab(): string
  if (exists('g:did_coc_loaded') && g:did_coc_loaded)
    return ""
  elseif pumvisible()
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
enddef

def SmartShiftTab(): string
  if (exists('g:did_coc_loaded') && g:did_coc_loaded)
    return ""
  elseif pumvisible()
    return "\<C-P>"
  else
    return "\<S-Tab>"
  endif
enddef

def SmartEnter(): string
  if (exists('g:did_coc_loaded') && g:did_coc_loaded)
    return ""
  elseif pumvisible()
    return "\<C-Y>"
  else
    return "\<C-G>u\<CR>"
  endif
enddef

def ToggleMouse(): void
  if &mouse == ''
    set mouse=a
    set scrolloff=0
    Notify('Mouse: On')
  else
    set mouse=
    set scrolloff=10
    Notify('Mouse: Off')
  endif
enddef

##############################################################################
## |#3| Settings:
##############################################################################
# Indentation:
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set softtabstop=-1
set expandtab
set autoindent
set copyindent

autocmd FileType python {
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=-1
}

# Line number:
set number
if g:mode == 'dynamic'
  set relativenumber
  autocmd InsertEnter * set norelativenumber
  autocmd InsertLeave * set relativenumber
endif

# Menu:
set wildmenu
set wildoptions=pum,tagfile
set pumheight=15

# Searching:
set ignorecase

if has('reltime') # Do incremental searching
  set incsearch   # when it's possible to timeout.
endif

set hlsearch
# 'hlsearch' highlights the search which is good. But
# when loading/sourcing VimScript with 'hlsearch' set
# Vim highlights the search again. Setting 'nohlsearch'
# is a good option but ever time toggling it is not an
# efficient way to do. `nohlsearch` here comes for the
# rescue. If `nohlsearch` is ran after the 'hlsearch'
# it will just temporarily remove highlights from the
# search. If  n  or  N  is pressed, the search will be
# highlighted again.
:nohlsearch

# Misc:
set splitright
set splitbelow
set belloff=all
set nrformats=alpha,hex,bin,unsigned

augroup SetSignColumn
  autocmd!
  autocmd BufWinEnter * {
    if win_gettype() == 'popup'
      &l:signcolumn = 'no'
    else
      &signcolumn = 'yes'
    endif
  }
augroup END

set shortmess=cfilnsxIT
&fillchars =
     'vert:┃,'
  .. 'fold:─'

# Backup stuff:
set undofile
set noswapfile

# Bar/Line stuff:
set showtabline=2
set laststatus=2
if (g:mode == 'dynamic')

  &statusline   = '%#PmenuSel#'
  &statusline ..= ' '
  &statusline ..= '%n'
  &statusline ..= ' '
  &statusline ..= '%#StatusLine#'

  &statusline ..= '%='

  &statusline ..= '%Y'
  &statusline ..= ' '

  &statusline ..= '%#PmenuSel#'
  &statusline ..= ' '
  &statusline ..= '%l:%v (%L)'
  &statusline ..= ' '
  &statusline ..= '%#StatusLine#'

endif

# Syntax highlighting:
if has('syntax_on')
  syntax enable
else
  syntax on
endif

# Background color: dark | light
&background = (exists('$BACKGROUND') ? $BACKGROUND : 'dark')

# Most of the UI options:
if !has('gui_running') && g:mode == 'dynamic'
  set clipboard=unnamedplus
  set spell
  set spelllang=en_us

  # Mouse:
  set ttymouse=sgr
  set mouse=a

  # 24-Bit color support
  set termguicolors
  set t_Co=256

  # Xterm true colors:
  &t_8f = "\e[38;2;%lu;%lu;%lum"
  &t_8b = "\e[48;2;%lu;%lu;%lum"

  # Undercurls:
  &t_Cs = "\e[4:3m"
  &t_Ce = "\e[4:0m"

  # Cursor shapes:
  &t_SI = "\e[5 q"    # blink bar. Unblinking: "\e[6 q"
  &t_EI = "\e[1 q"    # blink block. Unblinking: "e\[0 q"
  &t_SR = "\e[3 q"    # blink underline. Unblinking: "\e[3 q"

  # Color scheme:
  var theme = 'solarized8_flat'
  if theme == 'gruvbox'
    g:gruvbox_bold = false
    g:gruvbox_contrast_dark = 'hard'
    g:gruvbox_contrast_light = 'hard'
  elseif theme == 'solarized8_flat' || theme == 'solarized8'
  endif

  execute 'colorscheme ' .. theme
endif

# Overridden highlights:
highlight clear SpellBad
if (&termguicolors && &t_Co == '256')
  highlight SpellBad cterm=undercurl gui=undercurl
else
  highlight SpellBad cterm=underline term=underline
endif
highlight! link SpellCap   SpellBad
highlight! link SpellRare  SpellBad
highlight! link SpellLocal SpellBad

##############################################################################
## |#5| Keymaps:
##############################################################################
# Enable modified arrow keys, see  :help arrow_modifiers
execute "silent! set <xUp>=\e[@;*A"
execute "silent! set <xDown>=\e[@;*B"
execute "silent! set <xRight>=\e[@;*C"
execute "silent! set <xLeft>=\e[@;*D"

# Fix Alt Key:
execute "silent! set <A-A>=\ea"
execute "silent! set <A-B>=\eb"
execute "silent! set <A-C>=\ec"
execute "silent! set <A-D>=\ed"
execute "silent! set <A-E>=\ee"
execute "silent! set <A-F>=\ef"
execute "silent! set <A-G>=\eg"
execute "silent! set <A-H>=\eh"
execute "silent! set <A-I>=\ei"
execute "silent! set <A-J>=\ej"
execute "silent! set <A-K>=\ek"
execute "silent! set <A-L>=\el"
execute "silent! set <A-M>=\em"
execute "silent! set <A-N>=\en"
execute "silent! set <A-O>=\eo"
execute "silent! set <A-P>=\ep"
execute "silent! set <A-Q>=\eq"
execute "silent! set <A-R>=\er"
execute "silent! set <A-S>=\es"
execute "silent! set <A-T>=\et"
execute "silent! set <A-U>=\eu"
execute "silent! set <A-V>=\ev"
execute "silent! set <A-W>=\ew"
execute "silent! set <A-X>=\ex"
execute "silent! set <A-Y>=\ey"
execute "silent! set <A-Z>=\ez"
execute "silent! set <A-;>=\e;"

# Key code timeouts:
set timeout
set timeoutlen=1000
set ttimeout
set ttimeoutlen=50

# The Legend Key:
g:mapleader = "\<A-F>"

# Self-discipline:
nnoremap <Up>     :echoerr "Use k"<CR>
nnoremap <Down>   :echoerr "Use j"<CR>
nnoremap <Right>  :echoerr "Use l"<CR>
nnoremap <Left>   :echoerr "Use h"<CR>

inoremap <Up>     <Cmd>echoerr "Use k in NORMAL mode"<CR>gi
inoremap <Down>   <Cmd>echoerr "Use j in NORMAL mode"<CR>gi
inoremap <Right>  <Cmd>echoerr "Use l in NORMAL mode"<CR>gi
inoremap <Left>   <Cmd>echoerr "Use h in NORMAL mode"<CR>gi

nnoremap <C-L> :call <SID>Refresh()<CR>

nnoremap <A-M> <Cmd>call <SID>ToggleMouse()<CR>
inoremap <A-M> <Cmd>call <SID>ToggleMouse()<CR>
vnoremap <A-M> <Cmd>call <SID>ToggleMouse()<CR>
cnoremap <A-M> <Cmd>call <SID>ToggleMouse()<CR>

inoremap <expr> <Tab>   <SID>SmartTab()
inoremap <expr> <S-Tab> <SID>SmartShiftTab()
inoremap <expr> <CR>    <SID>SmartEnter()

# Sweet swaps:
nnoremap 0 ^
nnoremap ^ 0
nnoremap <A-E> $

nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

nnoremap <A-;> :
vnoremap <A-;> :
snoremap <A-;> :
nnoremap <A-V> V

# Buffers:
nnoremap <Tab>    :bnext<CR>
nnoremap <S-Tab>  :bprevious<CR>
nnoremap <A-Q>    :bdelete<CR>
# nnoremap <A-L>    :ls<CR>

##############################################################################
## |#6| Auto commands:
##############################################################################
autocmd BufReadPost * {
  if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    exe "normal! g`\""
  endif
}
